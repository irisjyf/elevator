C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EEPROM2
OBJECT MODULE PLACED IN ..\04_bin\WriteCard\eeprom2.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE eeprom2.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2) OBJECT(..\
                    -04_bin\WriteCard\eeprom2.obj)

line level    source

   1             
   2          /*****************************Nothing below this line***************************/  
   3          
   4          // (c) Copyright 2007-2017, Guozhou Chen. All Rights Reserved. 
   5           
   6          /******************************************************************************** 
   7           *  个人申明：                                  *  
   8           *      本人在运用STC89C5x系列单片机内部EEPROM时，了解其对非0xff值的存储空间* 
   9           *      不能通过字节编程直接写入。这一约定可能给一些人带来应用的麻烦，所以本* 
  10           *      人决定编写一能够让程序员不考虑这一约定的API。经过几个小时的编写和调 * 
  11           *      试，基本能达到本人原本设想的目标。由于时间仓促及个人水平有限，不免会* 
  12           *      有些算法低效，还望高手指教。Email:chenguozhou1982@yahoo.com.cn。  * 
  13           *                                        * 
  14           *      本程序通过改几个宏定义可以运用到STC的很多型号MCU上，本人只测试了  * 
  15           *      STC89C5x系列                            * 
  16            
  17           *      本程序可以任意修改和传播，修改者请注明修改人、修改时间，传播过程请注* 
  18           *      明原著。不得用于任何商业目的。                    * 
  19           *                                        * 
  20           ******************************************************************************** 
  21           *  File Name:  EEPROM.C, V0.2.0                                                * 
  22           *  Author:     Guozhou Chen                                                    * 
  23           *  Date:       2007.09.15                                                    * 
  24           *                                        * 
  25           ******************************************************************************** 
  26           *  使用数据类型说明：                              * 
  27           *          UINT：16位无符号整形                    * 
  28           *          BYTE：8位无符号字符型                   * 
  29           *          BOOL：1位布尔类型                     * 
  30           *                                        * 
  31           ******************************************************************************** 
  32           *  直接调用的API说明:                              * 
  33           *                                        * 
  34           *      读函数原形：UINT EEPROM_ReadBytes(UINT addr, BYTE *buf, UINT size)  * 
  35           *            函数返回为UINT类型的实际读出数据字节数。        * 
  36           *      参数说明：  addr为需要读取EEPROM区域的第一字节地址，取值范围为内部  * 
  37           *            EEPROM除最后一扇区外的地址，因最后一扇区被牺牲做为缓存。* 
  38           *            buf为目的数据区指针，即指向保存读出数据区域的首地址。 * 
  39           *            size为要求读出数据的字节数                * 
  40           *                                        * 
  41           *      写函数原形：UINT EEPROM_WritBytes(UINT addr, BYTE *buf, UINT size)  * 
  42           *            函数返回为UINT类型的实际写入数据字节数。        * 
  43           *      参数说明：  addr为需要写入EEPROM区域的第一字节地址，取值范围为内部  * 
  44           *            EEPROM除最后一扇区外的地址，因最后一扇区被牺牲做为缓存。* 
  45           *            buf为源数据区指针，即指向需要写入数据区域的首地址。   * 
  46           *            size为要求写入数据的字节数                * 
  47           *                                        * 
  48           ******************************************************************************** 
  49           * 使用说明：                                 * 
  50           *    1、根据MCU和编译器的实际情况修改几个宏定义和数据类型定义。宏定义和数据类* 
  51           *      型定义部分可以单独写成头文件。                    * 
  52           *    2、在需要使用EEPROM_ReadBytes（）和EEPROM_WritBytes（）函数的文件中做个 * 
  53           *      原形申明。                              * 
  54           *    3、在需要的地方直接添入实参调用即可。                 * 
C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 2   

  55           *                                        * 
  56           ********************************************************************************/ 
  57           
  58          /******************************************************************************** 
  59           *                                        * 
  60           * 头文件                                   * 
  61           *                                        * 
  62           ********************************************************************************/ 
  63          //#include <STC89C5x.h>
  64          #include "STC15Fxxxx.h"
  65           
  66          /******************************************************************************** 
  67           *                                        * 
  68           * 数据类型定义                                 * 
  69           *                                        * 
  70           ********************************************************************************/ 
  71           typedef unsigned int   UINT; 
  72           typedef unsigned char  BYTE; 
  73           typedef bit      BOOL; 
  74           
  75          /******************************************************************************** 
  76           *                                        * 
  77           * 宏定义                                   * 
  78           *                                        * 
  79           ********************************************************************************/ 
  80          #define BYTES_EACH_SECTOR 512   //MCU EEPROM每扇区的字节数 
  81           
  82          //CPU等待时间，晶振0-5M设置为3，5-10M为2，10-20M为1，大于20M为0 
  83          #define WAIT_TIME     0  
  84             
  85          #define USEING_EACH_SECTOR  512   //计划每扇区要用的字节数，用量越小写速度越快 
  86           
  87          #define EEPROM_ADDR_START 0x2000  //EEPROM起始地址 
  88          #define EEPROM_ADDR_END   0xf3ff  //EEPROM结束地址 
  89           
  90           
  91          /******************************************************************************** 
  92           *                                        * 
  93           * 从指定首地址为addr的EEPROM区域读出size字节数据到buf指向的区域内，并返回实际读* 
  94           * 出数据的字节数                               * 
  95           *                                        * 
  96           ********************************************************************************/ 
  97           
  98          UINT EEPROM_ReadBytes(UINT addr, BYTE *buf, const UINT size) 
  99          { 
 100   1        BOOL old_EA; 
 101   1         
 102   1        BYTE *p_buf;   
 103   1        UINT i, current_size; 
 104   1         
 105   1        p_buf = buf; 
 106   1        current_size = 0; 
 107   1         
 108   1        ISP_CMD = 0x01; 
 109   1        ISP_CONTR = 0x80|WAIT_TIME;  
 110   1       
 111   1        for (i = 0; i < size; i++) 
 112   1        { 
 113   2          //地址越界检测 
 114   2          if ((addr < EEPROM_ADDR_START)  || (addr > EEPROM_ADDR_END)) 
 115   2          { 
 116   3            break;   
C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 3   

 117   3          }      
 118   2           
 119   2          ISP_ADDRH = addr>>8; 
 120   2          ISP_ADDRL = addr&0x00ff; 
 121   2           
 122   2          old_EA = EA; 
 123   2          EA = 0; 
 124   2           
 125   2          ISP_TRIG = 0x46; 
 126   2          ISP_TRIG = 0xB9; 
 127   2           
 128   2          EA = old_EA; 
 129   2       
 130   2          *p_buf = ISP_DATA; 
 131   2               
 132   2          addr++; 
 133   2          p_buf++; 
 134   2          current_size++; 
 135   2       
 136   2        } 
 137   1        ISP_CMD = 0x00;  
 138   1        ISP_CONTR = 0x00;  
 139   1         
 140   1        return current_size; 
 141   1      } 
 142           
 143          /******************************************************************************** 
 144           *                                        * 
 145           * 把buf指向单元内的数据写入地址为addr的EEPROM单元内，成功返回1，或则返回0    * 
 146           *                                        * 
 147           ********************************************************************************/ 
 148          BOOL EEPROM_WritByte(UINT addr, BYTE *buf) 
 149          { 
 150   1        BOOL old_EA; 
 151   1       
 152   1        if ((addr < EEPROM_ADDR_START) || (addr > EEPROM_ADDR_END)) 
 153   1        { 
 154   2          return 0;  
 155   2        } 
 156   1         
 157   1        ISP_CMD = 0x02; 
 158   1        ISP_CONTR = 0x80|WAIT_TIME; 
 159   1               
 160   1        ISP_DATA = (*buf); 
 161   1         
 162   1        ISP_ADDRH = addr>>8; 
 163   1        ISP_ADDRL = addr&0x00ff; 
 164   1         
 165   1        old_EA = EA;   
 166   1        EA = 0; 
 167   1           
 168   1        ISP_TRIG = 0x46; 
 169   1        ISP_TRIG = 0xB9; 
 170   1           
 171   1        EA = old_EA;   
 172   1         
 173   1        ISP_CMD = 0x00;  
 174   1        ISP_CONTR = 0x00;  
 175   1           
 176   1        return 1;  
 177   1      } 
 178           
C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 4   

 179          /******************************************************************************** 
 180           *                                        * 
 181           * 擦除AddrInSector地址所在的整个扇区                     * 
 182           *                                        * 
 183           ********************************************************************************/ 
 184          void ErasureAllSector(UINT AddrInSector) 
 185          { 
 186   1        BOOL old_EA; 
 187   1         
 188   1        ISP_CMD = 0x03; 
 189   1        ISP_CONTR = 0x80|WAIT_TIME; 
 190   1         
 191   1        ISP_ADDRH = AddrInSector>>8; 
 192   1        ISP_ADDRL = AddrInSector&0x00ff; 
 193   1         
 194   1        old_EA = EA;   
 195   1        EA = 0; 
 196   1           
 197   1        ISP_TRIG = 0x46; 
 198   1        ISP_TRIG = 0xB9; 
 199   1           
 200   1        EA = old_EA;   
 201   1         
 202   1        ISP_CMD = 0x00;  
 203   1        ISP_CONTR = 0x00;    
 204   1      } 
 205           
 206          /******************************************************************************** 
 207           *                                        * 
 208           * 从首地址为src扇区单元拷贝连续size字节数据到首地址为des的连续扇区单元内，并返 * 
 209           * 回实际拷贝的字节数                             * 
 210           *                                        * 
 211           ********************************************************************************/ 
 212          UINT CopySector(UINT src, UINT des, const UINT size) 
 213          { 
 214   1        BYTE temp; 
 215   1        UINT current_size, i; 
 216   1         
 217   1        current_size = 0; 
 218   1         
 219   1        for (i = 0; i < size; i++) 
 220   1        { 
 221   2          if (!EEPROM_ReadBytes(src, &temp, 1)) 
 222   2          { 
 223   3            break;   
 224   3          } 
 225   2           
 226   2          if (!EEPROM_WritByte(des, &temp))  
 227   2          { 
 228   3            break;   
 229   3          } 
 230   2           
 231   2          des++; 
 232   2          src++; 
 233   2          current_size++;    
 234   2        } 
 235   1         
 236   1        return  current_size; 
 237   1      } 
 238           
 239          /******************************************************************************** 
 240           *                                        * 
C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 5   

 241           * 把buf指向区域内的size字节数据写入首地址为addr的EEPROM连续区域，并返回实际写入* 
 242           * 数据的字节数                                 * 
 243           *                                        * 
 244           ********************************************************************************/ 
 245          UINT EEPROM_WritBytes(UINT addr, BYTE *buf, const UINT size) 
 246          { 
 247   1        BYTE *p_buf, temp, move; 
 248   1         
 249   1        UINT i, bufaddr, current_size, cur_sector_start_addr; 
 250   1         
 251   1        p_buf = buf; 
 252   1         
 253   1        move = 0; 
 254   1        current_size = 0; 
 255   1         
 256   1        for (i = 0; i < size; i++) 
 257   1        { 
 258   2          if (!EEPROM_ReadBytes(addr, &temp, 1)) 
 259   2          { 
 260   3            break;   
 261   3          } 
 262   2           
 263   2          if (temp == 0xff) 
 264   2          { 
 265   3            EEPROM_WritByte(addr, p_buf); 
 266   3          } 
 267   2          //发现第一个单元不是0xff，要从新写入数据需要做擦除整个扇区 
 268   2          else                       
 269   2          { 
 270   3            //擦除用作缓冲的这个扇区 
 271   3            ErasureAllSector(EEPROM_ADDR_END); 
 272   3       
 273   3            cur_sector_start_addr = addr&0xfe00; 
 274   3       
 275   3            //把第一个非0xff单元前的数据拷贝到缓冲扇区 
 276   3            CopySector(cur_sector_start_addr 
 277   3                  , (EEPROM_ADDR_END + 1 - BYTES_EACH_SECTOR) 
 278   3                  , (addr - cur_sector_start_addr)); 
 279   3       
 280   3            //计算剩余需要存储的数据需写入缓冲扇区的首个单元地址 
 281   3            bufaddr = (addr - cur_sector_start_addr) 
 282   3                + (EEPROM_ADDR_END + 1 - BYTES_EACH_SECTOR); 
 283   3       
 284   3            //把剩余要存储的数据写入缓冲扇区 
 285   3            for (  ; i < size; i++) 
 286   3            { 
 287   4              EEPROM_WritByte(bufaddr, p_buf); 
 288   4       
 289   4              addr++; 
 290   4              bufaddr++; 
 291   4              p_buf++; 
 292   4              current_size++; 
 293   4            } 
 294   3             
 295   3            //把需要改变区域后的数据写入缓冲扇区 
 296   3            if (addr < cur_sector_start_addr + USEING_EACH_SECTOR ) 
 297   3            { 
 298   4              CopySector(addr, bufaddr, USEING_EACH_SECTOR  
 299   4                    - (addr - cur_sector_start_addr));  
 300   4            } 
 301   3       
 302   3            //擦除当前扇区 
C51 COMPILER V9.53.0.0   EEPROM2                                                           11/29/2016 23:27:04 PAGE 6   

 303   3            ErasureAllSector(cur_sector_start_addr); 
 304   3            move = 1; 
 305   3            break; 
 306   3          } 
 307   2           
 308   2          addr++; 
 309   2          p_buf++; 
 310   2          current_size++; 
 311   2        } 
 312   1         
 313   1        if (move) 
 314   1        { 
 315   2          //把缓冲扇区数据拷贝到当前扇区 
 316   2          CopySector((EEPROM_ADDR_END - BYTES_EACH_SECTOR + 1) 
 317   2                , cur_sector_start_addr, USEING_EACH_SECTOR); 
 318   2        } 
 319   1         
 320   1        return current_size; 
 321   1      } 
 322          /*****************************Nothing below this line***************************/
 323          
 324          
 325          
 326          
 327          
 328          
 329          
 330           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    647    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      40
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
