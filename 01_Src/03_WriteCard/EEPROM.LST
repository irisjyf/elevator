C51 COMPILER V9.53.0.0   EEPROM                                                            07/16/2017 23:21:50 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\04_bin\WriteCard\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE EEPROM.C OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND OBJECT(..\04_bin\Wr
                    -iteCard\EEPROM.obj)

line level    source

   1          /*********************************************************
   2               +---------------------------------------------+
   3               |智趣电子       原创程序    多功能旋转POV LED |
   4               +---------------------------------------------+       
   5          
   6           此源码版权属 智趣电子 全权享有，如欲引用，敬请署名并告知
   7                  严禁随意用于商业目的，违者必究，后果自负
   8                  智趣电子 
   9                   ->产品咨询 QQ:1327074668 MSN:zhiqudz@163.com
  10                           ->产品网店 http://58788771.taobao.com/
  11                                  Tel:18106718021
  12                   /*********************************************/
  13                   /*     项 目:  平面/立体/三色/多功能旋转POV LED  */
  14                   /*     模 块： EEPROM模块                                                */
  15                   /*     功 能： EEPROM驱动                                */
  16                   /*     版 本： V3.0                                                      */
  17                   /*     设 计： ZhiQu Studio                                      */
  18                   /*     时 间： 2013年7月5日                                      */
  19                   /*     修 改:  2013.7.5.19:00 创建项目                   */
  20                   /*     说 明： 主控MCU STC115F08S2                       */             
  21                   /*********************************************/
  22          #include "EEPROM.H"
  23          #include <string.h>
  24          
  25          /*----------------------------
  26          软件延时
  27          ----------------------------*/
  28          void Delay1() //延时程序
  29          {
  30   1          uint i;
  31   1          uint d=10;
  32   1          while (d--)
  33   1          {
  34   2              i=1000;
  35   2              while (i--);
  36   2          }
  37   1      }
  38          
  39          /*----------------------------
  40          关闭IAP
  41          ----------------------------*/
  42          void IapIdle()
  43          {
  44   1          IAP_CONTR = 0;                  //关闭IAP功能
  45   1          IAP_CMD = 0;                    //清除命令寄存器
  46   1          IAP_TRIG = 0;                   //清除触发寄存器
  47   1          IAP_ADDRH = 0x80;               //将地址设置到非IAP区域
  48   1          IAP_ADDRL = 0;
  49   1      }
  50          
  51          /*----------------------------
  52          从ISP/IAP/EEPROM区域读取一字节
  53          ----------------------------*/
  54          uchar IapReadByte(uint addr)
C51 COMPILER V9.53.0.0   EEPROM                                                            07/16/2017 23:21:50 PAGE 2   

  55          {
  56   1          uchar dat;                       //数据缓冲区
  57   1      
  58   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  59   1          IAP_CMD = CMD_READ;             //设置IAP命令
  60   1          IAP_ADDRL = addr;               //设置IAP低地址
  61   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  62   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  63   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  64   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  65   1          dat = IAP_DATA;                 //读ISP/IAP/EEPROM数据
  66   1          IapIdle();                      //关闭IAP功能
  67   1      
  68   1          return dat;                     //返回
  69   1      }
  70          
  71          /*----------------------------
  72          写一字节数据到ISP/IAP/EEPROM区域
  73          ----------------------------*/
  74          void IapProgramByte(uint addr, uchar dat)
  75          {
  76   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
  77   1          IAP_CMD = CMD_PROGRAM;          //设置IAP命令
  78   1          IAP_ADDRL = addr;               //设置IAP低地址
  79   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
  80   1          IAP_DATA = dat;                 //写ISP/IAP/EEPROM数据
  81   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
  82   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
  83   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
  84   1          IapIdle();
  85   1      }
  86          
  87          
  88          void IapProgramBytes(uint addr,uchar *dat,unsigned int length)
  89          {
  90   1          unsigned char i=0;
  91   1              for(i=0;i<length;i++)
  92   1              {
  93   2                      IapProgramByte(addr+i,dat[i]);
  94   2              }
  95   1      }
  96          void IapReadBytes(uint addr,unsigned char *dat,unsigned int length)
  97          {
  98   1              unsigned char i=0;
  99   1              for(i=0;i<length;i++)
 100   1              {
 101   2                      dat[i]=IapReadByte(addr+i);
 102   2              }
 103   1      } 
 104          
 105          
 106          /*----------------------------
 107          扇区擦除
 108          ----------------------------*/
 109          void IapEraseSector(uint addr)
 110          {
 111   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
 112   1          IAP_CMD = CMD_ERASE;            //设置IAP命令
 113   1          IAP_ADDRL = addr;               //设置IAP低地址
 114   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
 115   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
 116   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
C51 COMPILER V9.53.0.0   EEPROM                                                            07/16/2017 23:21:50 PAGE 3   

 117   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 118   1          IapIdle();
 119   1      }
 120          
 121          
 122          unsigned long ReadAgentID(void)
 123          {
 124   1              unsigned long lAgentID = 0;
 125   1              unsigned char datas[4]= {0xff, 0xff, 0xff, 0xff};
 126   1              IapReadBytes(AGENT_DATA_ADDR, datas, 4);
 127   1      
 128   1              if(datas[0] == 0xFF 
 129   1                      && datas[1] == 0xFF 
 130   1                      && datas[2] == 0xFF 
 131   1                      && datas[3] == 0xFF)
 132   1              {
 133   2                      lAgentID = 0xFFFFFFFF;
 134   2              }
 135   1              else
 136   1              {
 137   2                      lAgentID = (datas[0] << 24) + (datas[1] << 16) + (datas[2] << 8) + datas[3];
 138   2              }
 139   1              return lAgentID;
 140   1      }
 141          
 142          
 143          //uchar WriteAgentID(uchar datas[])
 144          //{     
 145          //      //unsigned long ulData = 0;
 146          //      uchar temp[16] = {0};
 147          //      IapReadBytes(DEVICE_STATUS_ADDR, temp, 16);
 148          
 149          //      temp[2] = datas[0];
 150          //      temp[3] = datas[1];
 151          //      temp[4] = datas[2];
 152          //      temp[5] = datas[3];
 153          //      IapEraseSector(DEVICE_STATUS_ADDR);
 154          //      
 155          //      IapProgramBytes(DEVICE_STATUS_ADDR, temp, 16);
 156          
 157          //      IapReadBytes(AGENT_ADDR, temp, 4);
 158          
 159          //      if(temp[0] == datas[0] 
 160          //              && temp[1] == datas[1] 
 161          //              && temp[2] == datas[2] 
 162          //              && temp[3] == datas[3])
 163          //              
 164          //              return Do_True;
 165          //      
 166          //      return Do_False;
 167          //}
 168          
 169          uchar ReadVerifyProduceFlag(void)
 170          {
 171   1              uchar temp = 0;
 172   1              temp = IapReadByte(VERIFY_PRODUCE_ADDR);
 173   1              if(0x01 == temp)
 174   1                      return DO_VERIFY;
 175   1              else
 176   1                      return DIS_VERIFY;
 177   1      }
 178          uchar WriteVerifyProduceFlag(uchar ucData)
C51 COMPILER V9.53.0.0   EEPROM                                                            07/16/2017 23:21:50 PAGE 4   

 179          {
 180   1              uchar ucFlag;
 181   1              uchar xdata temp[16] = {0};
 182   1              IapReadBytes(DEVICE_STATUS_ADDR, temp, 16);
 183   1      
 184   1              temp[VERIFY_PRODUCE_ADDR] = ucData;
 185   1              IapEraseSector(DEVICE_STATUS_ADDR);
 186   1              
 187   1              IapProgramBytes(DEVICE_STATUS_ADDR, temp, 16);
 188   1              
 189   1              ucFlag = IapReadByte(VERIFY_PRODUCE_ADDR);
 190   1      
 191   1              if(ucFlag == ucData )           
 192   1                      return Do_True;
 193   1              
 194   1              return Do_False;
 195   1      }
 196          
 197          
 198          
 199          uchar ReadOffset()
 200          {
 201   1              uchar ucData = 0;
 202   1              ucData = IapReadByte(OFFSET_ADDR);
 203   1              if(ucData == 0xff)
 204   1                      return 0;
 205   1              return ucData;
 206   1      }
 207          
 208          void ReadSectionPsw(uchar* pdatas)
 209          {       
 210   1              IapReadBytes(PSW_DATA_ADDR, pdatas, 4);
 211   1      }
 212          
 213          uchar ReadPasswordFlag(void)
 214          {
 215   1              uchar chFlag = 0;
 216   1              chFlag = IapReadByte(OFFSET_FLAG_ADDR);
 217   1              if(chFlag  == 1)
 218   1                      return DO_PASSWORD;
 219   1              return DIS_PASSWORD;
 220   1      }
 221          
 222          uchar WriteFlagDatas(uchar* pdatas, uint uLen)
 223          {
 224   1              uchar temp[16] = {0};
 225   1              
 226   1              IapReadBytes(DEVICE_STATUS_ADDR, temp, 16);
 227   1      
 228   1              memcpy(temp + 1,pdatas, uLen);
 229   1                      
 230   1              IapEraseSector(DEVICE_STATUS_ADDR);
 231   1              
 232   1              IapProgramBytes(DEVICE_STATUS_ADDR, temp, 16);
 233   1      
 234   1              memcpy(pdatas, temp + 1, uLen);
 235   1              
 236   1              return Do_True;
 237   1      }
 238          
 239          uchar ReadFlagDatas(uchar* ucDatas)
 240          {
C51 COMPILER V9.53.0.0   EEPROM                                                            07/16/2017 23:21:50 PAGE 5   

 241   1              IapReadBytes(DEVICE_STATUS_ADDR, ucDatas, 16);
 242   1              
 243   1              return Do_True;
 244   1      }
 245          
 246          uchar ReadReverseCheckFlag(void)
 247          {
 248   1              uchar chFlag = 0;
 249   1              chFlag = IapReadByte(REVERSE_FLAG_ADDR);
 250   1              if(chFlag == 1)
 251   1                      return DO_REVERSE;
 252   1              return DIS_REVERSE;
 253   1      }
 254          
 255          //uchar ReadVerifyAgentFlag(void)
 256          //{
 257          //      char temp = 0;
 258          //      temp = IapReadByte(VERIFY_AGENT_FLAG_ADDR);
 259          //      if(temp == 0xff)
 260          //              return DIS_VERIFY_AGENT;
 261          //      else
 262          //              return DO_VERIFY_AGENT;
 263          //}
 264          //uchar WriteVerifyAgentFlag(uchar ucData)
 265          //{
 266          //      unsigned char ucFlag;
 267          //      uchar temp[16] = {0};
 268          //      IapReadBytes(DEVICE_STATUS_ADDR, temp, 16);
 269          
 270          //      temp[VERIFY_AGENT_FLAG_ADDR] = ucData;
 271          //      IapEraseSector(DEVICE_STATUS_ADDR);
 272          //      
 273          //      ucFlag = IapReadByte(VERIFY_AGENT_FLAG_ADDR);
 274          
 275          //      if(ucFlag == ucData )
 276          //              
 277          //              return Do_True;
 278          //      
 279          //      return Do_False;
 280          //}
 281          
 282          
 283          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    620    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      44
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
